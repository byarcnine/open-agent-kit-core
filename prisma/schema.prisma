// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

enum MessageAuthor {
  AI
  USER
  TOOL
  ASSISTANT
}

enum GlobalUserRole {
  SUPER_ADMIN // can edit system settings
  VIEW_ALL_AGENTS // can view all AGENTS
  EDIT_ALL_AGENTS // can edit all AGENTS

  VIEW_EDIT_ASSIGNED_AGENTS // can view assigned AGENTS
}

enum AgentUserRole {
  OWNER
  EDITOR
  VIEWER
}

enum InvitationType {
  AGENT
  GLOBAL
}

enum PermissionGroupLevel {
  GLOBAL
  SPACE
  AGENT
}

model Message {
  id             String        @id @default(cuid())
  content        Json?
  author         MessageAuthor @default(USER)
  conversationId String
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("message")
}

enum SignUpSource {
  FORM
  GOOGLE
}

enum KnowledgeSourceStatus {
  PENDING
  EMBEDDING
  COMPLETED
  FAILED
}

model Agent {
  id                    String                 @id @default(cuid())
  name                  String
  description           String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  isActive              Boolean                @default(true)
  isPublic              Boolean                @default(false)
  agentSettings         Json?
  allowedUrls           String[]               @default([])
  chatSettings          Json?
  modelSettings         Json?
  conversations         Conversation[]
  systemPrompts         SystemPrompt[]
  knowledgeDocuments    KnowledgeDocument[]
  usage                 Usage[]
  agentUsers            AgentUser[]
  pluginAvailability    PluginAvailability[]
  pluginConfig          PluginConfig[]
  agentPluginData       AgentPluginData[]
  mcps                  MCPs[]
  knowledgeDocumentTags KnowledgeDocumentTag[]
  space                 Space                  @relation(fields: [spaceId], references: [id])
  spaceId               String
  permissionGroup       PermissionGroup[]

  @@map("agent")
}

model Conversation {
  id               String     @id @default(cuid())
  messages         Message[]
  // A short description of the conversation for the conversion listing
  tagline          String?
  agentId          String
  agent            Agent      @relation(fields: [agentId], references: [id], onDelete: Cascade)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  feedback         Feedback[]
  // if the conversation is from a logged in user, we store the user id here
  userId           String?
  user             User?      @relation(fields: [userId], references: [id])
  customIdentifier String?
  archived         Boolean    @default(false)
  private          Boolean    @default(false)

  @@map("conversation")
}

model SystemPrompt {
  id        String   @id @default(cuid())
  key       String
  prompt    String
  agentId   String
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_prompt")
}

model Feedback {
  id             String       @id @default(cuid())
  feedback       String
  sentiment      String
  feedbackType   String
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("feedback")
}

model KnowledgeDocument {
  id         String                 @id @default(cuid())
  agentId    String
  agent      Agent                  @relation(fields: [agentId], references: [id], onDelete: Cascade)
  name       String
  metadata   Json?
  provider   String                 @default("")
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  embeddings Embedding[]
  status     KnowledgeSourceStatus  @default(PENDING)
  tags       KnowledgeDocumentTag[] @relation("KnowledgeDocumentToTag")

  @@unique([agentId, name, provider])
  @@index([agentId])
  @@map("knowledge_document")
}

model KnowledgeDocumentTag {
  id        String              @id @default(cuid())
  agentId   String
  agent     Agent               @relation(fields: [agentId], references: [id], onDelete: Cascade)
  name      String
  color     String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  documents KnowledgeDocument[] @relation("KnowledgeDocumentToTag")

  @@unique([agentId, name])
  @@map("knowledge_document_tag")
}

model Embedding {
  id                  String                 @id @default(cuid())
  knowledgeDocumentId String
  knowledgeDocument   KnowledgeDocument      @relation(fields: [knowledgeDocumentId], references: [id], onDelete: Cascade)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  content             String
  vector              Unsupported("vector")?
  dimensions          Int                    @default(1536)

  @@map("embedding")
}

model Usage {
  id           String   @id @default(cuid())
  agentId      String
  agent        Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  year         Int
  month        Int
  day          Int
  invocations  BigInt   @default(0) // number of times the agent was invoked
  inputTokens  BigInt   @default(0) // number of input tokens
  outputTokens BigInt   @default(0) // number of output tokens
  initiator    String   @default("core") // user, plugin, tool ...
  modelId      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([agentId, year, month, day, modelId, initiator])
  @@map("usage")
}

model AgentUser {
  id      String        @id @default(cuid())
  userId  String
  agentId String
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  agent   Agent         @relation(fields: [agentId], references: [id], onDelete: Cascade)
  role    AgentUserRole @default(VIEWER)

  @@unique([userId, agentId])
  @@map("agent_user")
}

model Permission {
  id                String           @id @default(cuid())
  scope             String
  referenceId       String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  permissionGroupId String?
  permissionGroup   PermissionGroup? @relation(fields: [permissionGroupId], references: [id])
  user              User?            @relation(fields: [userId], references: [id])
  userId            String?

  @@unique([scope, referenceId, permissionGroupId])
  @@map("permission")
}

model PermissionGroup {
  id                   String                @id @default(cuid())
  name                 String
  description          String?
  level                PermissionGroupLevel  @default(GLOBAL)
  spaceId              String? // null for GLOBAL, required for SPACE and AGENT levels
  agentId              String? // null for GLOBAL and SPACE, required for AGENT level
  space                Space?                @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  agent                Agent?                @relation(fields: [agentId], references: [id], onDelete: Cascade)
  userPermissionGroups UserPermissionGroup[]
  permissions          Permission[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  invitation           Invitation[]

  @@unique([name, level, spaceId, agentId])
  @@map("permission_group")
}

model UserPermissionGroup {
  id                String          @id @default(cuid())
  userId            String
  permissionGroupId String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissionGroup   PermissionGroup @relation(fields: [permissionGroupId], references: [id], onDelete: Cascade)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([userId, permissionGroupId])
  @@map("user_permission_group")
}

model Invitation {
  id    String @id @default(cuid())
  email String

  permissionGroupId String
  permissionGroup   PermissionGroup @relation(fields: [permissionGroupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, permissionGroupId])
  @@map("invitation")
}

model PluginAvailability {
  id               String  @id @default(cuid())
  pluginIdentifier String
  agentId          String?
  agent            Agent?  @relation(fields: [agentId], references: [id], onDelete: Cascade)
  isEnabled        Boolean @default(false)
  isGlobal         Boolean @default(false)

  @@map("plugin_availability")
}

model PluginConfig {
  id               String   @id @default(cuid())
  pluginIdentifier String
  agentId          String?
  agent            Agent?   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  config           String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([pluginIdentifier, agentId])
  @@map("plugin_config")
}

model QueueJob {
  id          BigInt    @id @default(autoincrement()) @db.BigInt
  queue       String
  key         String?
  cron        String?
  payload     Json?
  result      Json?
  error       Json?
  progress    Int       @default(0)
  priority    Int       @default(0)
  attempts    Int       @default(0)
  maxAttempts Int?
  runAt       DateTime  @default(now())
  notBefore   DateTime?
  finishedAt  DateTime?
  processedAt DateTime?
  failedAt    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([key, runAt])
  @@index([queue, priority, runAt, finishedAt])
  @@map("queue_job")
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  userAgents           AgentUser[]
  conversations        Conversation[]
  name                 String
  emailVerified        Boolean
  image                String?
  role                 GlobalUserRole        @default(VIEW_EDIT_ASSIGNED_AGENTS)
  sessions             Session[]
  accounts             Account[]
  usage                Usage[]
  permission           Permission[]
  userPermissionGroups UserPermissionGroup[]

  @@map("user")
}

model Space {
  id              String            @id @default(cuid())
  name            String
  description     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  agents          Agent[]
  permissionGroup PermissionGroup[]

  @@map("space")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model GlobalConfig {
  key       String   @id @default(cuid())
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("global_config")
}

model AgentPluginData {
  agentId          String
  agent            Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  identifier       String
  pluginIdentifier String
  data             Json
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@id([agentId, identifier, pluginIdentifier])
  @@map("agent_plugin_data")
}

enum MCPType {
  SSE
  STDIO
}

model MCPs {
  id             String   @id @default(cuid())
  name           String   @default("")
  type           MCPType
  agentId        String
  agent          Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  connectionArgs Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("mcp")
}
